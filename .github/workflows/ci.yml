name: CI

permissions:
  contents: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Download dependencies
      run: make deps
      
    - name: Run tests
      run: make test
      
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Install golangci-lint
      run: |
        # Pin to a specific version compatible with Go 1.23
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
        
    - name: Run formatting and linting
      run: make check
      
  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Linux AMD64
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$(cat VERSION 2>/dev/null || echo 'dev')' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')'" \
          -o dist/gitcells-linux-amd64 ./cmd/gitcells
        
    - name: Create Linux 64-bit executable and archive
      run: |
        cd dist
        # Create user-friendly executable (no extension - Unix convention)
        cp gitcells-linux-amd64 gitcells-linux
        
        # Create traditional archive for users who prefer them
        tar -czf gitcells-linux.tar.gz gitcells-linux
        
    - name: Upload Linux 64-bit artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux
        path: |
          dist/gitcells-linux
          dist/gitcells-linux.tar.gz
        retention-days: 30
        
  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Linux ARM64
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$(cat VERSION 2>/dev/null || echo 'dev')' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')'" \
          -o dist/gitcells-linux-arm64 ./cmd/gitcells
        
    - name: Create Linux ARM64 executable and archive
      run: |
        cd dist
        # Create traditional archive for users who prefer them
        tar -czf gitcells-linux-arm64.tar.gz gitcells-linux-arm64
        
    - name: Upload Linux ARM64 artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: |
          dist/gitcells-linux-arm64
          dist/gitcells-linux-arm64.tar.gz
        retention-days: 30
        
  build-darwin-amd64:
    name: Build macOS Intel
    runs-on: macos-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build macOS Intel
      run: |
        mkdir -p dist
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$(cat VERSION 2>/dev/null || echo 'dev')' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')'" \
          -o dist/gitcells-darwin-amd64 ./cmd/gitcells
        
    - name: Create macOS Intel executable and archive
      run: |
        cd dist
        # Create user-friendly executable (no extension - Unix convention)
        cp gitcells-darwin-amd64 gitcells-macos-intel
        
        # Create traditional archive for users who prefer them
        tar -czf gitcells-macos-intel.tar.gz gitcells-macos-intel
        
    - name: Upload macOS Intel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-intel
        path: |
          dist/gitcells-macos-intel
          dist/gitcells-macos-intel.tar.gz
        retention-days: 30
        
  build-darwin-arm64:
    name: Build macOS Apple Silicon
    runs-on: macos-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build macOS Apple Silicon
      run: |
        mkdir -p dist
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$(cat VERSION 2>/dev/null || echo 'dev')' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')'" \
          -o dist/gitcells-darwin-arm64 ./cmd/gitcells
        
    - name: Create macOS Apple Silicon executable and archive
      run: |
        cd dist
        # Create user-friendly executable (no extension - Unix convention)
        cp gitcells-darwin-arm64 gitcells-macos-apple-silicon
        
        # Create traditional archive for users who prefer them
        tar -czf gitcells-macos-apple-silicon.tar.gz gitcells-macos-apple-silicon
        
    - name: Upload macOS Apple Silicon artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-apple-silicon
        path: |
          dist/gitcells-macos-apple-silicon
          dist/gitcells-macos-apple-silicon.tar.gz
        retention-days: 30
        
  build-windows-amd64:
    name: Build Windows AMD64
    runs-on: windows-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Windows AMD64
      shell: bash
      run: |
        mkdir -p dist
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$(cat VERSION 2>/dev/null || echo 'dev')' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')'" \
          -o dist/gitcells-windows-amd64.exe ./cmd/gitcells
        
    - name: Create Windows executable and archive
      shell: powershell
      run: |
        cd dist
        # Create user-friendly executable (.exe extension - Windows convention)
        Copy-Item gitcells-windows-amd64.exe gitcells-windows.exe
        
        # Create zip archive for users who prefer them
        Compress-Archive -Path gitcells-windows.exe -DestinationPath gitcells-windows.zip -Force
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows
        path: |
          dist/gitcells-windows.exe
          dist/gitcells-windows.zip
        retention-days: 30
        
  create-version-prerelease:
    name: Create Version Pre-release
    runs-on: ubuntu-latest
    needs: [test, lint, build-linux-amd64, build-linux-arm64, build-darwin-amd64, build-darwin-arm64, build-windows-amd64]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # Need previous commit to detect VERSION changes
        
    - name: Check if VERSION file changed
      id: version_check
      run: |
        if git diff HEAD~1 HEAD --name-only | grep -q "^VERSION$"; then
          echo "VERSION file changed"
          VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "changed=true" >> $GITHUB_OUTPUT
          
          # Check if this version tag already exists
          if git tag -l | grep -q "^v${VERSION}$"; then
            echo "❌ Tag v${VERSION} already exists!"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "✅ New version: ${VERSION}"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "VERSION file unchanged"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Download all build artifacts
      if: steps.version_check.outputs.changed == 'true' && steps.version_check.outputs.exists == 'false'
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Organize artifacts
      if: steps.version_check.outputs.changed == 'true' && steps.version_check.outputs.exists == 'false'
      run: |
        mkdir -p dist
        find artifacts/ -name "gitcells-*" -type f -exec cp {} dist/ \;
        
    - name: Create pre-release with tag
      if: steps.version_check.outputs.changed == 'true' && steps.version_check.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version_check.outputs.version }}
        name: GitCells v${{ steps.version_check.outputs.version }} (Pre-release)
        body: |
          ## GitCells v${{ steps.version_check.outputs.version }} - Pre-release
          
          ⚠️ **This is a pre-release version for testing and validation.**
          
          ### Installation
          
          #### Quick Install (Linux/macOS)
          ```bash
          curl -sSL https://github.com/Classic-Homes/gitcells/releases/download/v${{ steps.version_check.outputs.version }}/gitcells-macos-apple-silicon.tar.gz | tar -xz
          chmod +x gitcells-macos-apple-silicon
          sudo mv gitcells-macos-apple-silicon /usr/local/bin/gitcells
          ```
          
          #### Download Options
          
          **Direct Executables (Recommended)**
          - **Windows**: `gitcells-windows.exe` → rename to `gitcells.exe` → add to PATH
          - **macOS (Intel)**: `gitcells-macos-intel` → `chmod +x` → move to `/usr/local/bin/gitcells`
          - **macOS (Apple Silicon)**: `gitcells-macos-apple-silicon` → `chmod +x` → move to `/usr/local/bin/gitcells`
          - **Linux (64-bit)**: `gitcells-linux` → `chmod +x` → move to `/usr/local/bin/gitcells`
          - **Linux (ARM64)**: `gitcells-linux-arm64` → `chmod +x` → move to `/usr/local/bin/gitcells`
          
          **Archives**
          - **Windows**: `gitcells-windows.zip`
          - **macOS/Linux**: `gitcells-*.tar.gz`
          
          ### Testing & Validation
          
          Please test this pre-release and report any issues. Once validated, this will be promoted to a production release.
          
        files: |
          dist/gitcells-*
        prerelease: true
        make_latest: false