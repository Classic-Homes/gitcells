name: CI

permissions:
  contents: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Download dependencies
      run: make deps
      
    - name: Run tests
      run: make test
      
  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Install golangci-lint
      run: |
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        
    - name: Run formatting and linting
      run: make check
      
  build-linux-amd64:
    name: Build Linux AMD64
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Linux AMD64
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" \
          -o dist/gitcells-linux-amd64 ./cmd/gitcells
        
    - name: Create Linux AMD64 archive
      run: |
        cd dist
        cp gitcells-linux-amd64 gitcells
        tar -czf gitcells-$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')-linux-amd64.tar.gz gitcells
        rm gitcells
        
    - name: Upload Linux AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64
        path: dist/gitcells-*-linux-amd64*
        retention-days: 30
        
  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Linux ARM64
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" \
          -o dist/gitcells-linux-arm64 ./cmd/gitcells
        
    - name: Create Linux ARM64 archive
      run: |
        cd dist
        cp gitcells-linux-arm64 gitcells
        tar -czf gitcells-$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')-linux-arm64.tar.gz gitcells
        rm gitcells
        
    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64
        path: dist/gitcells-*-linux-arm64*
        retention-days: 30
        
  build-darwin-amd64:
    name: Build macOS Intel
    runs-on: macos-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build macOS Intel
      run: |
        mkdir -p dist
        GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" \
          -o dist/gitcells-darwin-amd64 ./cmd/gitcells
        
    - name: Create macOS Intel archive
      run: |
        cd dist
        cp gitcells-darwin-amd64 gitcells
        tar -czf gitcells-$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')-darwin-amd64.tar.gz gitcells
        rm gitcells
        
    - name: Upload macOS Intel artifact
      uses: actions/upload-artifact@v4
      with:
        name: darwin-amd64
        path: dist/gitcells-*-darwin-amd64*
        retention-days: 30
        
  build-darwin-arm64:
    name: Build macOS Apple Silicon
    runs-on: macos-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build macOS Apple Silicon
      run: |
        mkdir -p dist
        GOOS=darwin GOARCH=arm64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" \
          -o dist/gitcells-darwin-arm64 ./cmd/gitcells
        
    - name: Create macOS Apple Silicon archive
      run: |
        cd dist
        cp gitcells-darwin-arm64 gitcells
        tar -czf gitcells-$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')-darwin-arm64.tar.gz gitcells
        rm gitcells
        
    - name: Upload macOS Apple Silicon artifact
      uses: actions/upload-artifact@v4
      with:
        name: darwin-arm64
        path: dist/gitcells-*-darwin-arm64*
        retention-days: 30
        
  build-windows-amd64:
    name: Build Windows AMD64
    runs-on: windows-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Windows AMD64
      shell: bash
      run: |
        mkdir -p dist
        GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build \
          -ldflags "-s -w -X main.version=$(git describe --tags --always --dirty 2>/dev/null || echo 'dev') -X main.buildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ) -X main.commitHash=$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')" \
          -o dist/gitcells-windows-amd64.exe ./cmd/gitcells
        
    - name: Create Windows AMD64 archive
      shell: bash
      run: |
        cd dist
        cp gitcells-windows-amd64.exe gitcells.exe
        zip gitcells-$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')-windows-amd64.zip gitcells.exe
        rm gitcells.exe
        
    - name: Upload Windows AMD64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-amd64
        path: dist/gitcells-*-windows-amd64*
        retention-days: 30
        
  create-prerelease:
    name: Create Pre-release
    runs-on: ubuntu-latest
    needs: [test, lint, build-linux-amd64, build-linux-arm64, build-darwin-amd64, build-darwin-arm64, build-windows-amd64]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Organize artifacts
      run: |
        mkdir -p dist
        find artifacts/ -name "gitcells-*" -type f -exec cp {} dist/ \;
        
    - name: Get commit info
      id: commit
      run: |
        echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "timestamp=$(date -u +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
        
    - name: Create development release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: dev-${{ steps.commit.outputs.timestamp }}-${{ steps.commit.outputs.short_sha }}
        name: Development Build ${{ steps.commit.outputs.short_sha }}
        body: |
          ## Development Build
          
          **Commit:** ${{ steps.commit.outputs.short_sha }}  
          **Branch:** main  
          **Built:** ${{ steps.commit.outputs.timestamp }}  
          
          This is an automated development build from the latest main branch.  
          
          ### Download
          
          Choose the appropriate binary for your platform:
          - **Windows**: `gitcells-windows-amd64.exe`
          - **macOS (Intel)**: `gitcells-darwin-amd64`  
          - **macOS (Apple Silicon)**: `gitcells-darwin-arm64`
          - **Linux (x64)**: `gitcells-linux-amd64`
          - **Linux (ARM64)**: `gitcells-linux-arm64`
          
        files: |
          dist/gitcells-*
        prerelease: true
        make_latest: false