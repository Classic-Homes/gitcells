name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Install nfpm
      run: |
        curl -sfL https://install.goreleaser.com/github.com/goreleaser/nfpm.sh | sh -s -- -b /usr/local/bin
        
    - name: Build binaries
      run: |
        mkdir -p dist
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" -o dist/gitcells-linux-amd64 ./cmd/gitcells
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" -o dist/gitcells-linux-arm64 ./cmd/gitcells
        
    - name: Create packages
      run: |
        # AMD64 packages
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="amd64" nfpm package -f build/package/nfpm.yaml -p deb -t dist/
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="amd64" nfpm package -f build/package/nfpm.yaml -p rpm -t dist/
        
        # ARM64 packages
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="arm64" nfpm package -f build/package/nfpm.yaml -p deb -t dist/
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="arm64" nfpm package -f build/package/nfpm.yaml -p rpm -t dist/
        
        # Also create tar.gz archives
        cd dist
        tar -czf gitcells-${{ needs.create-release.outputs.version }}-linux-amd64.tar.gz gitcells-linux-amd64
        tar -czf gitcells-${{ needs.create-release.outputs.version }}-linux-arm64.tar.gz gitcells-linux-arm64
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: dist/*
        
  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Build binary
      run: |
        mkdir dist
        go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" -o dist\gitcells.exe .\cmd\gitcells
        
    - name: Create installer
      run: |
        # Create NSIS script
        @"
        !define PRODUCT_NAME "GitCells"
        !define PRODUCT_VERSION "${{ needs.create-release.outputs.version }}"
        !define PRODUCT_PUBLISHER "GitCells Team"
        
        Name "`${PRODUCT_NAME} `${PRODUCT_VERSION}"
        OutFile "dist\gitcells-`${PRODUCT_VERSION}-setup-windows-amd64.exe"
        InstallDir "`$PROGRAMFILES64\`${PRODUCT_NAME}"
        RequestExecutionLevel admin
        
        !include "MUI2.nsh"
        
        !define MUI_ABORTWARNING
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_LICENSE "LICENSE"
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        
        !insertmacro MUI_LANGUAGE "English"
        
        Section "Install"
          SetOutPath `$INSTDIR
          File "dist\gitcells.exe"
          
          ; Note: PATH update requires manual configuration or third-party plugin
          
          ; Create uninstaller
          WriteUninstaller "`$INSTDIR\uninstall.exe"
          
          ; Registry entries
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${PRODUCT_NAME}" "DisplayName" "`${PRODUCT_NAME}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${PRODUCT_NAME}" "UninstallString" "`$INSTDIR\uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${PRODUCT_NAME}" "Publisher" "`${PRODUCT_PUBLISHER}"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${PRODUCT_NAME}" "DisplayVersion" "`${PRODUCT_VERSION}"
          
          ; Start Menu
          CreateDirectory "`$SMPROGRAMS\`${PRODUCT_NAME}"
          CreateShortcut "`$SMPROGRAMS\`${PRODUCT_NAME}\`${PRODUCT_NAME}.lnk" "`$INSTDIR\gitcells.exe"
          CreateShortcut "`$SMPROGRAMS\`${PRODUCT_NAME}\Uninstall.lnk" "`$INSTDIR\uninstall.exe"
        SectionEnd
        
        Section "Uninstall"
          ; Note: PATH removal requires manual configuration
          
          Delete "`$INSTDIR\gitcells.exe"
          Delete "`$INSTDIR\uninstall.exe"
          RMDir "`$INSTDIR"
          
          Delete "`$SMPROGRAMS\`${PRODUCT_NAME}\*.*"
          RMDir "`$SMPROGRAMS\`${PRODUCT_NAME}"
          
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\`${PRODUCT_NAME}"
        SectionEnd
        "@ | Out-File -Encoding ASCII installer.nsi
        
        # Build installer
        makensis installer.nsi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: dist/*.exe
        
  build-macos:
    name: Build macOS Package
    runs-on: macos-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        
    - name: Build binaries
      run: |
        mkdir -p dist
        go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" -o dist/gitcells-amd64 ./cmd/gitcells
        GOARCH=arm64 go build -ldflags="-s -w -X main.version=${{ needs.create-release.outputs.version }}" -o dist/gitcells-arm64 ./cmd/gitcells
        
        # Create universal binary
        lipo -create -output dist/gitcells dist/gitcells-amd64 dist/gitcells-arm64
        
    - name: Create package
      run: |
        # Create directory structure
        mkdir -p pkg/usr/local/bin
        cp dist/gitcells pkg/usr/local/bin/
        chmod +x pkg/usr/local/bin/gitcells
        
        # Create package
        pkgbuild --root pkg \
                 --identifier com.gitcells.gitcells \
                 --version ${{ needs.create-release.outputs.version }} \
                 --install-location / \
                 dist/gitcells-${{ needs.create-release.outputs.version }}-macos-universal.pkg
                 
        # Also create tar.gz for homebrew
        cd dist
        tar -czf gitcells-${{ needs.create-release.outputs.version }}-macos-universal.tar.gz gitcells
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-package
        path: dist/*
        
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: [create-release, build-linux, build-windows, build-macos]
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        name: GitCells v${{ needs.create-release.outputs.version }}
        body: |
          ## GitCells v${{ needs.create-release.outputs.version }}
          
          ### Installation
          
          #### Windows
          Download and run the `.exe` installer
          
          #### macOS
          Download and install the `.pkg` file, or use the `.tar.gz` archive
          
          #### Linux
          - **Debian/Ubuntu**: `sudo dpkg -i gitcells_*.deb`
          - **RHEL/Fedora**: `sudo rpm -i gitcells-*.rpm`
          - **Other**: Extract the `.tar.gz` archive
          
        files: |
          artifacts/linux-packages/*
          artifacts/windows-installer/*
          artifacts/macos-package/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}