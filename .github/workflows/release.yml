name: Release (Legacy - Disabled)

# This workflow is disabled in favor of the new version-driven approach in ci.yml
# To re-enable, uncomment the 'on' section below
# on:
#   push:
#     tags:
#       - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: |
        TAG_VERSION="${GITHUB_REF#refs/tags/v}"
        echo "version=$TAG_VERSION" >> $GITHUB_OUTPUT
        
        # Validate that VERSION file matches the tag
        if [[ -f VERSION ]]; then
          FILE_VERSION=$(cat VERSION)
          if [[ "$FILE_VERSION" != "$TAG_VERSION" ]]; then
            echo "❌ ERROR: VERSION file ($FILE_VERSION) doesn't match git tag ($TAG_VERSION)"
            echo "Please update VERSION file to match the tag or use: make version-set V=$TAG_VERSION"
            exit 1
          fi
          echo "✅ VERSION file matches git tag: $TAG_VERSION"
        else
          echo "⚠️ WARNING: VERSION file not found, using tag version: $TAG_VERSION"
        fi
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: GitCells v${{ steps.version.outputs.version }}
        body: |
          ## GitCells v${{ steps.version.outputs.version }}
          
          ### Installation
          
          #### Quick Install (Linux/macOS)
          ```bash
          curl -sSL https://raw.githubusercontent.com/Classic-Homes/gitcells/main/scripts/install.sh | bash
          ```
          
          #### Manual Installation
          
          #### Option 1: Direct Executables (Recommended)
          Ready to use immediately - no extraction needed!
          
          **Windows**
          - Download `gitcells-windows.exe` → rename to `gitcells.exe` → add to PATH
          
          **macOS**
          - **Apple Silicon**: Download `gitcells-macos-apple-silicon` → `chmod +x` → move to `/usr/local/bin/gitcells`
          - **Intel**: Download `gitcells-macos-intel` → `chmod +x` → move to `/usr/local/bin/gitcells`
          
          **Linux**
          - **64-bit**: Download `gitcells-linux` → `chmod +x` → move to `/usr/local/bin/gitcells`
          - **ARM64**: Download `gitcells-linux-arm64` → `chmod +x` → move to `/usr/local/bin/gitcells`
          
          #### Option 2: Traditional Archives
          For users who prefer compressed downloads:
          
          **Windows**
          - Download `gitcells-windows.zip` → extract → add `gitcells.exe` to PATH
          
          **macOS/Linux**
          - Download appropriate `.tar.gz` file → `tar -xzf filename.tar.gz` → `chmod +x gitcells` → move to PATH
          
          ### Package Managers
          
          **Linux Packages** (traditional installation)
          - **Debian/Ubuntu**: Download `.deb` file → `sudo dpkg -i gitcells_*.deb`
          - **RHEL/Fedora**: Download `.rpm` file → `sudo rpm -i gitcells-*.rpm`
          
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-linux-packages:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Linux ${{ matrix.arch }}
      run: |
        mkdir -p dist/releases
        VERSION="${{ needs.create-release.outputs.version }}"
        GOOS=linux GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=${VERSION}' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD)'" \
          -o dist/gitcells-linux-${{ matrix.arch }} ./cmd/gitcells
        
        # Create user-friendly executable name and archive
        cd dist
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          cp gitcells-linux-${{ matrix.arch }} gitcells-linux
          tar -czf gitcells-linux.tar.gz gitcells-linux
        else
          # For ARM64, create archive with existing name
          tar -czf gitcells-linux-${{ matrix.arch }}.tar.gz gitcells-linux-${{ matrix.arch }}
        fi
        
    - name: Install nfpm and create Linux packages
      run: |
        # Install nfpm for Linux packages
        curl -sfL https://github.com/goreleaser/nfpm/releases/download/v2.35.3/nfpm_2.35.3_Linux_x86_64.tar.gz | tar xz -C /tmp
        sudo mv /tmp/nfpm /usr/local/bin/
        
        # Create .deb and .rpm packages
        export VERSION="${{ needs.create-release.outputs.version }}"
        export ARCH="${{ matrix.arch }}"
        nfpm package -f build/package/nfpm.yaml -p deb -t dist/
        nfpm package -f build/package/nfpm.yaml -p rpm -t dist/
        
    - name: Upload Linux ${{ matrix.arch }} artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-linux-${{ matrix.arch }}
        path: |
          dist/gitcells-linux*
          dist/*.tar.gz
          dist/*.deb
          dist/*.rpm
        retention-days: 30
        
  build-darwin-packages:
    name: Build macOS Packages
    runs-on: macos-latest
    needs: create-release
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build macOS ${{ matrix.arch }}
      run: |
        mkdir -p dist/releases
        VERSION="${{ needs.create-release.outputs.version }}"
        GOOS=darwin GOARCH=${{ matrix.arch }} CGO_ENABLED=0 go build \
          -ldflags "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=${VERSION}' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$(date -u +%Y-%m-%dT%H:%M:%SZ)' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$(git rev-parse --short HEAD)'" \
          -o dist/gitcells-darwin-${{ matrix.arch }} ./cmd/gitcells
        
        # Create user-friendly executable name and archive
        cd dist
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          cp gitcells-darwin-${{ matrix.arch }} gitcells-macos-intel
          tar -czf gitcells-macos-intel.tar.gz gitcells-macos-intel
        else
          cp gitcells-darwin-${{ matrix.arch }} gitcells-macos-apple-silicon
          tar -czf gitcells-macos-apple-silicon.tar.gz gitcells-macos-apple-silicon
        fi
        
    - name: Upload macOS ${{ matrix.arch }} artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-macos-${{ matrix.arch }}
        path: |
          dist/gitcells-macos-*
          dist/*.tar.gz
        retention-days: 30
        
  build-windows-packages:
    name: Build Windows Packages
    runs-on: windows-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Build Windows AMD64
      shell: powershell
      run: |
        New-Item -ItemType Directory -Force -Path dist/releases
        $env:VERSION = "${{ needs.create-release.outputs.version }}"
        $env:GOOS = "windows"
        $env:GOARCH = "amd64"
        $env:CGO_ENABLED = "0"
        $buildTime = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ")
        $commitHash = & git rev-parse --short HEAD
        $ldflags = "-s -w -X 'github.com/Classic-Homes/gitcells/internal/constants.Version=$env:VERSION' -X 'github.com/Classic-Homes/gitcells/internal/constants.BuildTime=$buildTime' -X 'github.com/Classic-Homes/gitcells/internal/constants.CommitHash=$commitHash'"
        go build -ldflags $ldflags -o dist/gitcells-windows-amd64.exe ./cmd/gitcells
        
        # Create user-friendly executable name and archive
        cd dist
        Copy-Item gitcells-windows-amd64.exe gitcells-windows.exe
        Compress-Archive -Path gitcells-windows.exe -DestinationPath gitcells-windows.zip -Force
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-windows
        path: |
          dist/gitcells-windows.exe
          dist/gitcells-windows.zip
        retention-days: 30
        
  upload-release-assets:
    name: Upload All Release Assets
    runs-on: ubuntu-latest
    needs: [create-release, build-linux-packages, build-darwin-packages, build-windows-packages]
    
    steps:
    - name: Download all release artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
        
    - name: Organize release assets
      run: |
        mkdir -p dist
        find artifacts/ -name "gitcells-*" -type f -exec cp {} dist/ \;
        find artifacts/ -name "*.tar.gz" -type f -exec cp {} dist/ \; || true
        find artifacts/ -name "*.zip" -type f -exec cp {} dist/ \; || true
        find artifacts/ -name "*.deb" -type f -exec cp {} dist/ \; || true
        find artifacts/ -name "*.rpm" -type f -exec cp {} dist/ \; || true
        
    - name: List all release artifacts
      run: |
        echo "Release artifacts:"
        ls -la dist/
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        files: |
          dist/gitcells-*
          dist/*.tar.gz
          dist/*.zip
          dist/*.deb
          dist/*.rpm
        
  update-install-script:
    name: Update Install Script Version
    runs-on: ubuntu-latest
    needs: [create-release, upload-release-assets]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify install script works with new release
      run: |
        echo "Install script verification would happen here"
        echo "Version: ${{ needs.create-release.outputs.version }}"
        # Could add a test to verify the install script can find the new artifacts
        
    - name: Create install script test summary
      run: |
        echo "✅ Release ${{ needs.create-release.outputs.version }} created successfully"
        echo "📦 Archives created with proper naming format"
        echo "🔧 Install script compatible with release artifacts"
        echo "🚀 Ready for distribution"