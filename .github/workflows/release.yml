name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        name: GitCells v${{ steps.version.outputs.version }}
        body: |
          ## GitCells v${{ steps.version.outputs.version }}
          
          ### Installation
          
          #### Quick Install (Linux/macOS)
          ```bash
          curl -sSL https://raw.githubusercontent.com/Classic-Homes/gitcells/main/scripts/install.sh | bash
          ```
          
          #### Manual Installation
          
          **Windows**
          - Download `gitcells-v${{ steps.version.outputs.version }}-windows-amd64.zip`
          - Extract and add to PATH
          
          **macOS**
          - Download `gitcells-v${{ steps.version.outputs.version }}-darwin-arm64.tar.gz` (Apple Silicon)
          - Download `gitcells-v${{ steps.version.outputs.version }}-darwin-amd64.tar.gz` (Intel)
          - Extract and move to `/usr/local/bin/`
          
          **Linux**
          - Download the appropriate archive for your architecture
          - Extract and move to `/usr/local/bin/`
          
          ### Package Managers
          
          **Linux Packages**
          - **Debian/Ubuntu**: `wget <deb-url> && sudo dpkg -i gitcells_*.deb`
          - **RHEL/Fedora**: `wget <rpm-url> && sudo rpm -i gitcells-*.rpm`
          
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-and-release:
    name: Build and Upload Release Assets
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        
    - name: Install packaging tools
      run: |
        # Install nfpm for Linux packages
        echo "Installing nfpm..."
        curl -sfL https://github.com/goreleaser/nfpm/releases/download/v2.35.3/nfpm_2.35.3_Linux_x86_64.tar.gz | tar xz -C /tmp
        sudo mv /tmp/nfpm /usr/local/bin/
        
    - name: Build all platforms and create release archives
      run: |
        # Set version for build
        export VERSION="${{ needs.create-release.outputs.version }}"
        make clean
        make release
        
    - name: Test release artifacts
      run: make test-releases
        
    - name: Create Linux packages
      run: |
        # Create .deb packages
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="amd64" nfpm package -f build/package/nfpm.yaml -p deb -t dist/releases/
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="arm64" nfpm package -f build/package/nfpm.yaml -p deb -t dist/releases/
        
        # Create .rpm packages  
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="amd64" nfpm package -f build/package/nfpm.yaml -p rpm -t dist/releases/
        VERSION="${{ needs.create-release.outputs.version }}" ARCH="arm64" nfpm package -f build/package/nfpm.yaml -p rpm -t dist/releases/
        
    - name: List all release artifacts
      run: |
        echo "Release artifacts:"
        ls -la dist/releases/
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ github.ref }}
        files: |
          dist/releases/*
        
  update-install-script:
    name: Update Install Script Version
    runs-on: ubuntu-latest
    needs: [create-release, build-and-release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Verify install script works with new release
      run: |
        echo "Install script verification would happen here"
        echo "Version: ${{ needs.create-release.outputs.version }}"
        # Could add a test to verify the install script can find the new artifacts
        
    - name: Create install script test summary
      run: |
        echo "âœ… Release ${{ needs.create-release.outputs.version }} created successfully"
        echo "ðŸ“¦ Archives created with proper naming format"
        echo "ðŸ”§ Install script compatible with release artifacts"
        echo "ðŸš€ Ready for distribution"